/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package it.greengers.potcentral

import io.ktor.network.selector.*
import io.ktor.network.sockets.*
import it.greengers.potcentral.core.PotContext
import it.greengers.potcentral.handlers.InitialClientMessagesHandler
import it.greengers.potcentral.handlers.attachInitialHandler
import it.greengers.potcentral.handlers.handleConnection
import it.greengers.potcentral.handlers.removeFromManagerOnDisconnection
import it.greengers.potconnectors.connection.ConnectionManager
import it.greengers.potconnectors.connection.potConnect
import it.greengers.potconnectors.dns.LocalPotDNS
import kotlinx.coroutines.*
import java.net.InetSocketAddress
import java.nio.file.Files
import java.nio.file.Paths
import kotlin.coroutines.EmptyCoroutineContext

val PORT_FILE = Paths.get("conf/port")
val PORT = getPort()

fun getPort() : Int {
    try {
        if(Files.exists(PORT_FILE))
            return Files.newBufferedReader(PORT_FILE).readLine().toInt()
    } catch (e : Exception) {
        println("Unable to get the port of the server by configuration: ${e.localizedMessage}")
    }
    return 5555
}

fun welcome() {
    println(
        "________        _____ _____   __      _____ \n" +
                "___  __ \\______ __  /____  | / /_____ __  /_\n" +
                "__  /_/ /_  __ \\_  __/__   |/ / _  _ \\_  __/\n" +
                "_  ____/ / /_/ // /_  _  /|  /  /  __// /_  \n" +
                "/_/      \\____/ \\__/  /_/ |_/   \\___/ \\__/  \n" +
                "                                            \n" +
                "_________              _____                 ______\n" +
                "__  ____/_____ _______ __  /_______________ ____  /\n" +
                "_  /     _  _ \\__  __ \\_  __/__  ___/_  __ `/__  / \n" +
                "/ /___   /  __/_  / / // /_  _  /    / /_/ / _  /  \n" +
                "\\____/   \\___/ /_/ /_/ \\__/  /_/     \\__,_/  /_/   \n" +
                "                                                  "
    )
}


@ExperimentalCoroutinesApi
@ObsoleteCoroutinesApi
fun main() {
    welcome()
    runBlocking {
        LocalPotDNS.setApplicationName("main-server")
        val server = aSocket(ActorSelectorManager(Dispatchers.IO)).tcp().bind(InetSocketAddress("127.0.0.1", PORT))
        println("Waiting for connection on ${server.localAddress}")
        while(true) {
            try {
                server.accept().potConnect { res ->
                    res.withValue {
                        println("PotCentral | Incoming connection from ${it.getConnectedAdress()}")
                        ConnectionManager.register(it)
                        it.removeFromManagerOnDisconnection()
                        it.attachInitialHandler()
                        println("PotCentral | Accepted connection [$it]")
                    }.withError {
                        println("PotCentral | Error while PotConnect: $it")
                    }
                }
            } catch (e : Exception) {
                println("Exception in potConnect:")
                e.printStackTrace()
            }
        }
    }
}
