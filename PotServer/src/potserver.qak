System potserver

//EVENTS *****************************************************************
Event loadComplete : loadComplete(X)
Event criticalErr : criticalErr(X)
Event valueOutOfRange : valueOutOfRange(SENSOR_ID, CURR_VALUE)
Event sensorValue : sensorValue(SENSOR_ID, CURR_VALUE)
Event polling : polling(DOPOLLING)

//DISPATCH ***************************************************************
Dispatch sensorError : sensorError(SENSOR_ID, DESC)
Dispatch sensorStarted : sensorStarted(SENSOR_ID)
Dispatch stateRequest : stateRequest(WHOHASREQUESTED)
Dispatch changeCurrentPlant : changeCurrentPlant(PLANT_INFO)

//REQUEST/REPLY **********************************************************
Request sensorRead : sensorRead(SENSOR_ID)
Reply readedValue : readedValue(SENSOR_ID, VALUE)

//CONTEXT ****************************************************************
Context ctxpotserver ip[host="localhost" port=9000]

QActor manageractor context ctxpotserver {
	[#
		val SENS_IDS = it.greengers.potserver.sensors.SensorFactory.getSensorIds()
		val loadcount = it.greengers.potserver.utils.LoadCounter(SENS_IDS)
		val CORE = it.greengers.potserver.core.PotCore
		val DESTINATION = ""
		val TEMP_SENS_ID = `it.greengers`.potserver.sensors.SensorFactory.getMainId(`it.greengers`.potserver.sensors.SensorType.TEMPERATURE)
		val HUM_SENS_ID = `it.greengers`.potserver.sensors.SensorFactory.getMainId(`it.greengers`.potserver.sensors.SensorType.HUMIDITY)
		val BRI_SENS_ID = `it.greengers`.potserver.sensors.SensorFactory.getMainId(`it.greengers`.potserver.sensors.SensorType.BRIGHTNESS)
		val CURR_PLANT = `it.greengers`.potserver.core.CurrentPlant
	#]
	
	State s0 initial {
		[# 
			CURR_PLANT.loadCurrentPlant()
			val err = `it.greengers`.potserver.core.Settings.load()
			if(err != null) {
				
			}
		#]
		println("$name | Started")
		emit loadComplete:loadComplete(OK)
	} Goto waitsensors if [# loadcount.unloadedElements() > 0 #] else work
	
	State waitsensors {
		println("$name | Waiting for sensor start [${loadcount.unloadedElements()} / ${loadcount.loadedElements()} remaining]")
	} Transition t 
		whenMsg sensorStarted -> sensorstarted
		whenMsg sensorError -> sensorerror
	
	State sensorstarted {
		onMsg(sensorStarted:sensorStarted) {
			printCurrentMessage
			[# loadcount.setLoaded(payloadArg(0)) #]
		}
	} Goto waitsensors if [# loadcount.unloadedElements() > 0 #] else work
	
	State sensorerror {
		emit criticalErr : criticalErr(SHUTDOWN)
	} Goto exit
	
	State work {
		println("$name | Waiting...")
	} Transition t 
		whenMsg stateRequest -> handleStateRequest
		whenEvent sensorValue -> updateState
		whenMsg changeCurrentPlant -> changeCurrentPlant
		whenEvent valueOutOfRange -> handleValueOutOfRange
		
	State updateState {
		onMsg(sensorValue : sensorValue) {
			[# `it.greengers`.potserver.plants.PlantUtils.updateCurrentPlantState(payloadArg(0), payloadArg(1)) #]
		}
		updateResource[# `it.greengers`.potserver.plants.PlantUtils.currentPlantWithStateToJSON() #]
	} Goto work
	
	State changeCurrentPlant {
		onMsg(changeCurrentPlant : changeCurrentPlant) {
			[# `it.greengers`.potserver.plants.PlantUtils.changeCurrentPlantFromJSON(payloadArg(0)) #]
			emit polling : polling(DOPOLLING)
		}
	} Goto work
	
	State handleStateRequest {
		onMsg(stateRequest : stateRequest) {
			[# CORE.sendState(payloadArg(0), CURR_PLANT.STATE) #]
		}
	} Goto work
	
	State handleValueOutOfRange {
		onMsg(valueOutOfRange : valueOutOfRange) {
			[# CORE.sendValueOutOfRange(payloadArg(0), payloadArg(1)) #]
		}
	} Goto work
	
	State exit {
		println("$name | Terminate")
	}
}

QActor temperatureactor context ctxpotserver {
	[# 
		lateinit var SENSOR_ID : String
		val CURRENT_PLANT = `it.greengers`.potserver.core.CurrentPlant.currentPlant
		lateinit var SENSOR : `it.greengers`.potserver.sensors.InputSensor<Double>
		var CURR_VALUE : Double = 0.0
		var POLLING_TIME : Long = 5000
		var ERROR_FOUND = false
	#]
	
	State s0 initial {
		println("TemperatureActor: started")
	} Transition t whenEvent loadComplete -> getSensor
	
	State getSensor {
		[# 
			ERROR_FOUND = false
			val loadId = `it.greengers`.potserver.sensors.SensorFactory.getMainId(`it.greengers`.potserver.sensors.SensorType.TEMPERATURE)
			if(loadId == null) {
				ERROR_FOUND = true
		#]
				forward manageractor -m sensorError : sensorError(TEMPERATUREACTOR, NO_ID_FOUND)
		[#
			} else {
				SENSOR_ID = loadId!!
			
				val loadSensor = `it.greengers`.potserver.sensors.SensorFactory.getSensor(SENSOR_ID) as `it.greengers`.potserver.sensors.InputSensor<Double>
				if(loadSensor == null) {
		#]
					forward manageractor -m sensorError : sensorError($SENSOR_ID, ERROR_LOADING)
		[#
				}  else {
					SENSOR = loadSensor!!
				}
		#]
		
			forward manageractor -m sensorStarted : sensorStarted($SENSOR_ID) [# } #]
	} Goto work if [# ERROR_FOUND == false #] else exit
	
	State work {
		println("$name | Working")
	} Transition t0
		whenTimeVar POLLING_TIME -> polling
		whenEvent polling -> polling
		whenRequest sensorRead -> handleReadRequest
		whenEvent criticalErr -> exit
		
	State polling {
		[# CURR_VALUE = SENSOR.read() #]
		println("$name | Read temperature from sensor [$CURR_VALUE]")
		emit sensorValue : sensorValue($SENSOR_ID, $CURR_VALUE)
		
		[# if(CURRENT_PLANT.optimalPlantCondition.temperatureRange.isOutOfRange(CURR_VALUE)) { #]
				emit valueOutOfRange : valueOutOfRange($SENSOR_ID, $CURR_VALUE)
		[# } #]
	} Goto work
	
	State handleReadRequest {
		onMsg(sensorRead : sensorRead(SENSOR_ID)) {
			printCurrentMessage
			[# if(payloadArg(0) == SENSOR_ID) {
					CURR_VALUE = SENSOR.read()
			#]
					println("$name | Read temperature from sensor [$CURR_VALUE]")
					replyTo sensorRead with readedValue : readedValue($SENSOR_ID, $CURR_VALUE)
			[# } #]
		}		
	} Goto work
	
	State exit {
		println("$name | exit")
	}
	
}

QActor humidityactor context ctxpotserver {
	[# 
		lateinit var SENSOR_ID : String
		val CURRENT_PLANT = `it.greengers`.potserver.core.CurrentPlant.currentPlant
		lateinit var SENSOR : `it.greengers`.potserver.sensors.InputSensor<Double>
		var CURR_VALUE : Double = 0.0
		var POLLING_TIME : Long = 5000
		var ERROR_FOUND = false
	#]
	
	State s0 initial {
		println("TemperatureActor: started")
	} Transition t whenEvent loadComplete -> getSensor
	
	State getSensor {
		[# 
			ERROR_FOUND = false
			val loadId = `it.greengers`.potserver.sensors.SensorFactory.getMainId(`it.greengers`.potserver.sensors.SensorType.HUMIDITY)
			if(loadId == null) {
				ERROR_FOUND = true
		#]
				forward manageractor -m sensorError : sensorError(HUMIDITYACTOR, NO_ID_FOUND)
		[#
			} else {
				SENSOR_ID = loadId!!
			
				val loadSensor = `it.greengers`.potserver.sensors.SensorFactory.getSensor(SENSOR_ID) as `it.greengers`.potserver.sensors.InputSensor<Double>
				if(loadSensor == null) {
		#]
					forward manageractor -m sensorError : sensorError($SENSOR_ID, ERROR_LOADING)
		[#
				}  else {
					SENSOR = loadSensor!!
				}
		#]
		
			forward manageractor -m sensorStarted : sensorStarted($SENSOR_ID) [# } #]
	} Goto work if [# ERROR_FOUND == false #] else exit
	
	State work {
		println("$name | Working")
	} Transition t0
		whenTimeVar POLLING_TIME -> polling
		whenEvent polling -> polling
		whenRequest sensorRead -> handleReadRequest
		whenEvent criticalErr -> exit
		
	State polling {
		[# CURR_VALUE = SENSOR.read() #]
		println("$name | Read humidity from sensor [$CURR_VALUE]")
		emit sensorValue : sensorValue($SENSOR_ID, $CURR_VALUE)
		
		[# if(CURRENT_PLANT.optimalPlantCondition.humidityRange.isOutOfRange(CURR_VALUE)) { #]
				emit valueOutOfRange : valueOutOfRange($SENSOR_ID, $CURR_VALUE)
		[# } #]
	} Goto work
	
	State handleReadRequest {
		onMsg(sensorRead : sensorRead(SENSOR_ID)) {
			printCurrentMessage
			[# if(payloadArg(0) == SENSOR_ID) {
					CURR_VALUE = SENSOR.read()
			#]
					println("$name | Read humidity from sensor [$CURR_VALUE]")
					replyTo sensorRead with readedValue : readedValue($SENSOR_ID, $CURR_VALUE)
			[# } #]
		}		
	} Goto work
	
	State exit {
		println("$name | exit")
	}
	
}

QActor brightnessactor context ctxpotserver {
	[# 
		lateinit var SENSOR_ID : String
		val CURRENT_PLANT = `it.greengers`.potserver.core.CurrentPlant.currentPlant
		lateinit var SENSOR : `it.greengers`.potserver.sensors.InputSensor<Double>
		var CURR_VALUE : Double = 0.0
		var POLLING_TIME : Long = 5000
		var ERROR_FOUND = false
	#]
	
	State s0 initial {
		println("TemperatureActor: started")
	} Transition t whenEvent loadComplete -> getSensor
	
	State getSensor {
		[# 
			ERROR_FOUND = false
			val loadId = `it.greengers`.potserver.sensors.SensorFactory.getMainId(`it.greengers`.potserver.sensors.SensorType.BRIGHTNESS)
			if(loadId == null) {
				ERROR_FOUND = true
		#]
				forward manageractor -m sensorError : sensorError(BRIGHTNESSACTOR, NO_ID_FOUND)
		[#
			} else {
				SENSOR_ID = loadId!!
			
				val loadSensor = `it.greengers`.potserver.sensors.SensorFactory.getSensor(SENSOR_ID) as `it.greengers`.potserver.sensors.InputSensor<Double>
				if(loadSensor == null) {
		#]
					forward manageractor -m sensorError : sensorError($SENSOR_ID, ERROR_LOADING)
		[#
				}  else {
					SENSOR = loadSensor!!
				}
		#]
		
			forward manageractor -m sensorStarted : sensorStarted($SENSOR_ID) [# } #]
	} Goto work if [# ERROR_FOUND == false #] else exit
	
	State work {
		println("$name | Working")
	} Transition t0
		whenTimeVar POLLING_TIME -> polling
		whenEvent polling -> polling
		whenRequest sensorRead -> handleReadRequest
		whenEvent criticalErr -> exit
		
	State polling {
		[# CURR_VALUE = SENSOR.read() #]
		println("$name | Read brightness from sensor [$CURR_VALUE]")
		emit sensorValue : sensorValue($SENSOR_ID, $CURR_VALUE)
		
		[# if(CURRENT_PLANT.optimalPlantCondition.brightnessRange.isOutOfRange(CURR_VALUE)) { #]
				emit valueOutOfRange : valueOutOfRange($SENSOR_ID, $CURR_VALUE)
		[# } #]
	} Goto work
	
	State handleReadRequest {
		onMsg(sensorRead : sensorRead(SENSOR_ID)) {
			printCurrentMessage
			[# if(payloadArg(0) == SENSOR_ID) {
					CURR_VALUE = SENSOR.read()
			#]
					println("$name | Read brightness from sensor [$CURR_VALUE]")
					replyTo sensorRead with readedValue : readedValue($SENSOR_ID, $CURR_VALUE)
			[# } #]
		}		
	} Goto work
	
	State exit {
		println("$name | exit")
	}
	
}

QActor batteryactor context ctxpotserver {

	State s0 initial {
		println("BatteryActor: started")
	}
	
}